(function() {var implementors = {};
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; FromIterator&lt;T&gt; for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["heapless"] = [{"text":"impl&lt;K, V, N, S&gt; FromIterator&lt;(K, V)&gt; for IndexMap&lt;K, V, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;Bucket&lt;K, V&gt;&gt; + ArrayLength&lt;Option&lt;Pos&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N, S&gt; FromIterator&lt;T&gt; for IndexSet&lt;T, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;Bucket&lt;T, ()&gt;&gt; + ArrayLength&lt;Option&lt;Pos&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, N&gt; FromIterator&lt;(K, V)&gt; for LinearMap&lt;K, V, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;(K, V)&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N&gt; FromIterator&lt;T&gt; for Vec&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl FromIterator&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;T, P&gt; FromIterator&lt;T&gt; for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; FromIterator&lt;Pair&lt;T, P&gt;&gt; for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()