var searchIndex = JSON.parse('{\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"O","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"c":[],"p":[]},\
"bmp280_rs":{"doc":"bmp280-rs","t":"DCDDLLLLLLAALLLALLLLLLLLLLLLLLLALLLLLLLLLLDCCCCCLLLLLLLMALLAAMAMAMLLLLNNENNNLLLLLLLLLNENNLLLLLLLLLNNENNNNNNLLLLLLLLLNNNNENNLLLLLLLLLNNNNNENLLLLLLLLLENNNNNNNLLLLLLLLLLLLLLLENNLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNLLLLLLLLL","n":["BMP280","I2CAddress","ModeNormal","ModeSleep","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","config","error","from","from","from","i2c_address","into","into","into","into_normal_mode","into_reset","into_sleep_mode","new","read_pressure","read_pressure","read_raw_pressure","read_raw_pressure","read_raw_temperature","read_raw_temperature","read_temperature","read_temperature","register","trigger_measurement","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Config","IIRFilterCoefficient","MeasurementMode","MeasurementStandbyTimeMillis","PressureOversampling","TemperatureOversampling","borrow","borrow_mut","drop_detection","elevator_floor_monitoring","from","handheld_device_dynamic","handheld_device_lowpower","iir_filter","iir_filter_coefficient","indoor_navigation","into","measurement_mode","measurement_standby_time_millis","measurement_standby_time_millis","pressure_oversampling","pressure_oversampling","temperature_oversampling","temperature_oversampling","try_from","try_into","type_id","weather_monitoring","Eight","Four","IIRFilterCoefficient","Off","Sixteen","Two","bits","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","Forced","MeasurementMode","Normal","Sleep","bits","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","FiveHundred","FourThousand","MeasurementStandbyTimeMillis","OneThousand","OneTwentyFive","SixtyTwoPointFive","TwoFifty","TwoThousand","ZeroPointFive","bits","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","Eight","Four","MeasurementSkipped","One","PressureOversampling","Sixteen","Two","bits","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","Eight","Four","MeasurementSkipped","One","Sixteen","TemperatureOversampling","Two","bits","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","Error","IncorrectDeviceId","NormalModeNeedsMeasStandbyTime","ReadRegister","ReadingDeviceAddressOverI2C","WriteConfig","WriteControlMeas","WriteRegister","as_error_source","backtrace","borrow","borrow_mut","cause","description","fmt","fmt","format","from","into","source","try_from","try_into","type_id","I2CAddress","SdoGrounded","SdoPulledUp","addr","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CalP1Byte0","CalP1Byte1","CalP2Byte0","CalP2Byte1","CalP3Byte0","CalP3Byte1","CalP4Byte0","CalP4Byte1","CalP5Byte0","CalP5Byte1","CalP6Byte0","CalP6Byte1","CalP7Byte0","CalP7Byte1","CalP8Byte0","CalP8Byte1","CalP9Byte0","CalP9Byte1","CalT1Byte0","CalT1Byte1","CalT2Byte0","CalT2Byte1","CalT3Byte0","CalT3Byte1","Config","CtrlMeas","Id","PressLSB","PressMSB","PressXLSB","Register","Reset","Status","TempLSB","TempMSB","TempXLSB","addr","borrow","borrow_mut","from","into","is_read_only","try_from","try_into","type_id"],"q":[[0,"bmp280_rs"],[42,"bmp280_rs::config"],[70,"bmp280_rs::config::iir_filter_coefficient"],[85,"bmp280_rs::config::measurement_mode"],[98,"bmp280_rs::config::measurement_standby_time_millis"],[116,"bmp280_rs::config::pressure_oversampling"],[132,"bmp280_rs::config::temperature_oversampling"],[148,"bmp280_rs::error"],[171,"bmp280_rs::i2c_address"],[183,"bmp280_rs::register"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into normal mode.","Reset the chip into sleep mode and reconfigure it with the …","Change into sleep mode","","Read the compensated pressure.","Read the compensated pressure.","Read the uncompensated pressure data. 20 bit value.","Read the uncompensated pressure data. 20 bit value.","Read the uncompensated temperature data. 20 bit value.","Read the uncompensated temperature data. 20 bit value.","Read the compensated temperature.","Read the compensated temperature.","","Trigger a “forced” mode single measurement.","","","","","","","","","","","","","","","","","","Use in NormalMode","Use in NormalMode","Returns the argument unchanged.","Use in NormalMode","Use in NormalMode","","","Use in NormalMode","Calls <code>U::from(self)</code>.","","","","","","","","","","","Use in sleep mode with the [trigger_measurement] methods.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","BMP280 I2CAddress is configured by pulling the SDO pin …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,5,3,4,5,3,4,0,0,5,3,4,0,5,3,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,5,3,4,5,3,4,5,3,4,0,0,0,0,0,0,9,9,9,9,9,9,9,9,0,9,9,0,0,9,0,9,0,9,9,9,9,9,13,13,0,13,13,13,13,13,13,13,13,13,13,13,13,15,0,15,15,15,15,15,15,15,15,15,15,15,16,16,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,0,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,0,18,18,18,18,18,18,18,18,18,18,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,8,8,8,8,8,8,8,8,8,8,8,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,[[]],[[]],[[]],[[[4,[[0,[1,2]],3]],[0,[1,2]]],[[7,[[4,[[0,[1,2]],5]],6]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[7,[[4,[[0,[1,2]],3]],6]]]],[[[4,[[0,[1,2]],5]],[0,[1,2]]],[[7,[[4,[[0,[1,2]],3]],6]]]],[[[0,[1,2]],8,9],[[7,[[4,[[0,[1,2]],3]],6]]]],[[[4,[[0,[1,2]],5]],[0,[1,2]]],[[7,[10,6]]]],[[[4,[[0,[1,2]],3]],[0,[1,2]]],[[7,[10,6]]]],[[[4,[[0,[1,2]],5]],[0,[1,2]]],[[7,[11,6]]]],[[[4,[[0,[1,2]],3]],[0,[1,2]]],[[7,[11,6]]]],[[[4,[[0,[1,2]],5]],[0,[1,2]]],[[7,[11,6]]]],[[[4,[[0,[1,2]],3]],[0,[1,2]]],[[7,[11,6]]]],[[[4,[[0,[1,2]],3]],[0,[1,2]]],[[7,[10,6]]]],[[[4,[[0,[1,2]],5]],[0,[1,2]]],[[7,[10,6]]]],0,[[[4,[[0,[1,2]],3]],[0,[1,2]]],[[7,[6]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[],12],0,0,0,0,0,0,[[]],[[]],[[],9],[[],9],[[]],[[],9],[[],9],0,0,[[],9],[[]],0,0,0,0,0,0,0,[[],7],[[],7],[[],12],[[],9],0,0,0,0,0,0,[13,14],[[]],[[]],[13,13],[[]],[[]],[[],7],[[],7],[[],12],0,0,0,0,[15,14],[[]],[[]],[15,15],[[]],[[]],[[],7],[[],7],[[],12],0,0,0,0,0,0,0,0,0,[16,14],[[]],[[]],[16,16],[[]],[[]],[[],7],[[],7],[[],12],0,0,0,0,0,0,0,[17,14],[[]],[[]],[17,17],[[]],[[]],[[],7],[[],7],[[],12],0,0,0,0,0,0,0,[18,14],[[]],[[]],[18,18],[[]],[[]],[[],7],[[],7],[[],12],0,0,0,0,0,0,0,0,[[],19],[6,[[21,[20]]]],[[]],[[]],[6,[[21,[19]]]],[6,22],[[6,23],24],[[6,23],24],[[6,25]],[[]],[[]],[6,[[21,[19]]]],[[],7],[[],7],[[],12],0,0,0,[8,14],[[]],[[]],[8,8],[[]],[[]],[[],7],[[],7],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[26,14],[[]],[[]],[[]],[[]],[26,27],[[],7],[[],7],[[],12]],"c":[],"p":[[8,"WriteRead"],[8,"Write"],[3,"ModeSleep"],[3,"BMP280"],[3,"ModeNormal"],[4,"Error"],[4,"Result"],[4,"I2CAddress"],[3,"Config"],[15,"i32"],[15,"u32"],[3,"TypeId"],[4,"IIRFilterCoefficient"],[15,"u8"],[4,"MeasurementMode"],[4,"MeasurementStandbyTimeMillis"],[4,"PressureOversampling"],[4,"TemperatureOversampling"],[8,"Error"],[3,"Backtrace"],[4,"Option"],[15,"str"],[3,"Formatter"],[6,"Result"],[3,"Formatter"],[4,"Register"],[15,"bool"]]},\
"defmt":{"doc":"A highly efficient logging framework that targets …","t":"DDDIDIDKOOOOLLLLLLLLLLLLOOOOOLOFKKLLLLLLLLXOOLLLLLLOXOKLOOOLLLLLLLLLLLLLLLOOOOKLO","n":["Debug2Format","Display2Format","Encoder","Format","Formatter","Logger","Str","acquire","assert","assert_eq","assert_ne","bitflags","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","dbg","debug","debug_assert","debug_assert_eq","debug_assert_ne","end_frame","error","flush","flush","format","format","format","format","from","from","from","from","from","global_logger","info","intern","into","into","into","into","into","new","panic","panic_handler","println","release","start_frame","timestamp","todo","trace","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unimplemented","unreachable","unwrap","warn","write","write","write"],"q":[[0,"defmt"]],"d":["An “adapter” type to feed <code>Debug</code> values into defmt …","An “adapter” type to feed <code>Display</code> values into defmt …","Encode raw defmt frames for sending over the wire.","Trait for types that can be formatted via defmt.","Handle to a defmt logger.","Global logger acquire-release mechanism","An interned string created via <code>intern!</code>.","Acquire the global logger in the current execution context.","Just like the <code>core::assert!</code> macro but <code>defmt</code> is used to log …","Just like the <code>core::assert_eq!</code> macro but <code>defmt</code> is used to …","Just like the <code>core::assert_ne!</code> macro but <code>defmt</code> is used to …","Generates a bitflags structure that can be formatted with …","","","","","","","","","","","","","Just like the <code>std::dbg!</code> macro but <code>defmt</code> is used to log the …","Logs data at <em>debug</em> level.","Just like the <code>core::debug_assert!</code> macro but <code>defmt</code> is used …","Just like the <code>core::debug_assert_eq!</code> macro but <code>defmt</code> is …","Just like the <code>core::debug_assert_ne!</code> macro but <code>defmt</code> is …","Finish encoding a log frame.","Logs data at <em>error</em> level.","Block until host has read all pending data.","Block until host has read all pending data.","Writes the defmt representation of <code>self</code> to <code>fmt</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Defines the global defmt logger.","Logs data at <em>info</em> level.","Creates an interned string (<code>Str</code>) from a string literal.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>Encoder</code>.","Just like the <code>core::panic!</code> macro but <code>defmt</code> is used to log …","Overrides the panicking behavior of <code>defmt::panic!</code>","Always logs data irrespective of log level.","Releases the global logger in the current execution …","Start encoding a log frame.","Defines the global timestamp provider for defmt.","Just like the <code>core::todo!</code> macro but <code>defmt</code> is used to log …","Logs data at <em>trace</em> level.","","","","","","","","","","","","","","","","Just like the <code>core::unimplemented!</code> macro but <code>defmt</code> is used …","Just like the <code>core::unreachable!</code> macro but <code>defmt</code> is used …","Unwraps an <code>Option</code> or <code>Result</code>, panicking if it is <code>None</code> or <code>Err</code>…","Logs data at <em>warn</em> level.","Writes <code>bytes</code> to the destination.","Write part of data for a log frame.","Writes formatted data to a <code>Formatter</code>."],"i":[0,0,0,0,0,0,0,14,0,0,0,0,3,7,9,1,2,3,7,9,1,2,1,2,0,0,0,0,0,3,0,0,14,15,7,9,2,3,7,9,1,2,0,0,0,3,7,9,1,2,3,0,0,0,14,3,0,0,0,3,7,9,1,2,3,7,9,1,2,3,7,9,1,2,0,0,0,0,14,3,0],"f":[0,0,0,0,0,0,0,[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],0,0,0,0,0,[[3,4]],0,[[]],[[]],[1],[[[7,[[0,[5,6]]]],1]],[[[9,[[0,[8,6]]]],1]],[[2,1]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[],3],0,0,0,[[]],[[3,4]],0,0,0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,[[[13,[12]]]],[[3,[13,[12]],4]],0],"c":[],"p":[[3,"Formatter"],[3,"Str"],[3,"Encoder"],[8,"FnMut"],[8,"Debug"],[8,"Sized"],[3,"Debug2Format"],[8,"Display"],[3,"Display2Format"],[4,"Result"],[3,"TypeId"],[15,"u8"],[15,"slice"],[8,"Logger"],[8,"Format"]]},\
"defmt_macros":{"doc":"INTERNAL; DO NOT USE. Please use the <code>defmt</code> crate to access …","t":"YOOOOOOOOOOXOOOOXOOOOOOOO","n":["Format","assert_","assert_eq_","assert_ne_","bitflags","dbg","debug","debug_assert_","debug_assert_eq_","debug_assert_ne_","error","global_logger","info","intern","internp","panic_","panic_handler","println","timestamp","todo_","trace","unreachable_","unwrap","warn","write"],"q":[[0,"defmt_macros"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[]},\
"defmt_parser":{"doc":"Parsing library for <code>defmt</code> format strings.","t":"NNNNNNNNNNNEENNNNNNNNENNNNNNNNNNNNNNENNNNNDNENNNENNENNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMMLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMMMMMMMMM","n":["Ascii","Binary","BitField","Bitflags","Bool","Char","ConflictingTypes","Debug","Debug","Debug","Display","DisplayHint","Error","Error","F32","F64","Format","FormatArray","FormatSequence","FormatSlice","ForwardsCompatible","Fragment","Hexadecimal","I128","I16","I32","I64","I8","ISO8601","IStr","Info","InvalidArraySpecifierMissingBracket","InvalidArraySpecifierMissingLength","InvalidInteger","InvalidTypeSpecifier","Isize","Level","Literal","MalformedFormatString","Microseconds","Millis","NoHint","Parameter","Parameter","ParserMode","Seconds","Str","Strict","TimePrecision","Trace","TrailingDataAfterBitfieldRange","Type","U128","U16","U32","U64","U8","U8Array","U8Slice","UnexpectedContentInFormatString","Unknown","UnknownDisplayHint","UnmatchedCloseBracket","UnmatchedOpenBracket","UnusedArgument","Usize","Warn","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_str","get_max_bitfield_range","hint","index","into","into","into","into","into","into","into","into","parse","partial_cmp","provide","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","alternate","alternate","crate_name","disambiguator","name","package","uppercase","zero_pad","zero_pad","zero_pad"],"q":[[0,"defmt_parser"],[185,"defmt_parser::DisplayHint"]],"d":["<code>:a</code>","<code>:b</code>","","<code>__internal_bitflags_NAME</code> instructs the decoder to print …","","A single Unicode character","","<code>:?</code>","","","","All display hints","The kinds of error this library can return","","","","<code>{=?}</code> OR <code>{}</code>","","","<code>{=[?]}</code>","Accepts unknown display hints","A part of a format string.","<code>:x</code> OR <code>:X</code>","","","","","","<code>:iso8601{ms,s}</code>, formats integers as timestamp in ISO8601 …","Interned string index.","","","","","","","The log level","A literal string (eg. <code>&quot;literal &quot;</code> in <code>&quot;literal {:?}&quot;</code>).","","<code>:us</code>, formats integers as timestamps in microseconds","","","A parameter of the form <code>{{0=Type:hint}}</code> in a format string.","A format parameter.","Parser mode","","String slice (i.e. passed directly; not as interned string …","Rejects unknown display hints","Precision of ISO8601 datetime","","","","","","","","","","Byte slice <code>{=[u8]}</code>.","","Display hints currently not supported / understood","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns <code>Some(smallest_bit_index, largest_bit_index)</code> …","The display hint, e.g. ‘:x’, ‘:b’, ‘:a’.","The argument index to display at this position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of the argument to display, e.g. ‘=u8’, ‘…","","","","","","","","","","","","","","","","","",""],"i":[3,3,5,3,5,5,6,3,5,1,5,0,0,1,5,5,5,5,5,5,9,0,3,5,5,5,5,5,3,5,1,6,6,6,6,5,0,8,6,3,4,3,0,8,0,4,5,9,0,1,6,0,5,5,5,5,5,5,5,6,3,6,6,6,6,5,1,1,3,4,5,6,7,8,1,9,3,4,5,6,7,8,1,9,3,4,5,6,7,8,1,9,3,4,5,6,7,8,1,9,5,3,4,5,6,7,8,1,9,3,4,5,6,7,8,1,9,3,4,5,6,6,7,8,1,9,3,4,5,6,6,7,8,1,9,5,0,7,7,3,4,5,6,7,8,1,9,0,1,6,6,3,4,5,6,7,8,1,9,6,3,4,5,6,7,8,1,9,3,4,5,6,7,8,1,9,7,3,4,5,6,7,8,1,9,24,25,26,26,26,26,24,27,24,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[1,1],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[3,3],10],[[4,4],10],[[5,5],10],[[6,6],10],[[7,7],10],[[8,8],10],[[1,1],10],[[9,9],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[3,11],12],[[4,11],12],[[5,11],12],[[6,11],12],[[6,11],12],[[7,11],12],[[8,11],12],[[1,11],12],[[9,11],12],[[]],[[]],[[]],[13,6],[[]],[[]],[[]],[[]],[[]],[2,[[14,[5]]]],[[[0,[15,16]]],17],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,9],[[14,[[18,[8]],6]]]],[[1,1],[[17,[19]]]],[20],[6,[[17,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[4,"Level"],[15,"str"],[4,"DisplayHint"],[4,"TimePrecision"],[4,"Type"],[4,"Error"],[3,"Parameter"],[4,"Fragment"],[4,"ParserMode"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ParseIntError"],[4,"Result"],[8,"Iterator"],[8,"Clone"],[4,"Option"],[3,"Vec"],[4,"Ordering"],[3,"Demand"],[8,"Error"],[3,"String"],[3,"TypeId"],[13,"Hexadecimal"],[13,"Binary"],[13,"Bitflags"],[13,"NoHint"]]},\
"doc_comment":{"doc":"The point of this (small) crate is to allow you to add doc …","t":"OO","n":["doc_comment","doctest"],"q":[[0,"doc_comment"]],"d":["This macro can be used to generate documentation upon a …","This macro provides a simpler way to test an outer …"],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"embedded_hal":{"doc":"A Hardware Abstraction Layer (HAL) for embedded systems","t":"IQQQQENQQQIIIQQNAALLAKLKAKKKKKKKLALLKKKKKKLAAKKKKAALLLAIQQIKKAAAAAAIQQKKIIKKIQQQQQQQEINGGIIINIIILLLKKLLLKLLLKKKKQIKQIKKAIQQQQEIININILLLKLLLAKLLLAKAKIIINNNIENDNIESSNNNDNSSLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLKLLLLLKKLKLAKLLKLLLLLLLLLLLLLLLLIQQKKAAAAIIIIKKKKKKKAIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQNIINIEIILLLLLLLLKKKKKKLKKLKALLLICCCCCCCCCCCCCCCCCCCCCCCCQQIIKKKLNNQINNRRRRDEELLLLLLLLLLLLLLLLLLMMKKLLLLLLLLLIIQIQKKKQIIIKKK","n":["Capture","Capture","Channel","Channel","Count","Direction","Downcounting","Duty","Duty","Error","Pwm","PwmPin","Qei","Time","Time","Upcounting","adc","blocking","borrow","borrow_mut","can","capture","clone","count","digital","direction","disable","disable","disable","enable","enable","enable","eq","fmt","fmt","from","get_duty","get_duty","get_max_duty","get_max_duty","get_period","get_resolution","into","prelude","serial","set_duty","set_duty","set_period","set_resolution","spi","timer","try_from","try_into","type_id","watchdog","Channel","Error","ID","OneShot","channel","read","can","delay","i2c","rng","serial","spi","Can","Error","Frame","receive","transmit","DelayMs","DelayUs","delay_ms","delay_us","AddressMode","Error","Error","Error","Error","Error","Error","Error","Operation","Read","Read","SevenBitAddress","TenBitAddress","Transactional","TransactionalIter","Write","Write","WriteIter","WriteIterRead","WriteRead","borrow","borrow_mut","eq","exec","exec_iter","fmt","from","into","read","try_from","try_into","type_id","write","write","write_iter_read","write_read","Error","Read","read","Error","Write","bflush","bwrite_all","write","Default","Error","Error","Error","Error","Operation","Transactional","Transfer","Transfer","Write","Write","WriteIter","borrow","borrow_mut","eq","exec","fmt","from","into","transfer","transfer","try_from","try_into","type_id","write","write","write_iter","write_iter","Default","Default","Default","Acknowledge","Bit","Crc","Error","ErrorKind","Extended","ExtendedId","Form","Frame","Id","MAX","MAX","Other","Overrun","Standard","StandardId","Stuff","ZERO","ZERO","as_raw","as_raw","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","data","dlc","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","id","into","into","into","into","is_data_frame","is_extended","is_remote_frame","is_standard","kind","kind","nb","new","new","new","new_remote","new_unchecked","new_unchecked","partial_cmp","standard_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Can","Error","Frame","receive","transmit","v1","v1_compat","v2","v2_compat","InputPin","OutputPin","StatefulOutputPin","ToggleableOutputPin","is_high","is_low","is_set_high","is_set_low","set_high","set_low","toggle","toggleable","Default","OldInputPin","OldOutputPin","borrow","borrow","borrow_mut","borrow_mut","from","from","from","from","into","into","is_high","is_high","is_low","is_low","is_set_high","is_set_high","is_set_low","is_set_low","new","new","set_high","set_high","set_low","set_low","try_from","try_from","try_into","try_into","type_id","type_id","Error","Error","Error","Error","High","InputPin","IoPin","Low","OutputPin","PinState","StatefulOutputPin","ToggleableOutputPin","borrow","borrow_mut","clone","eq","fmt","from","from","into","into_input_pin","into_output_pin","is_high","is_low","is_set_high","is_set_low","not","set_high","set_low","set_state","toggle","toggleable","try_from","try_into","type_id","Default","_embedded_hal_Capture","_embedded_hal_Pwm","_embedded_hal_PwmPin","_embedded_hal_Qei","_embedded_hal_adc_OneShot","_embedded_hal_blocking_delay_DelayMs","_embedded_hal_blocking_delay_DelayUs","_embedded_hal_blocking_i2c_Read","_embedded_hal_blocking_i2c_Write","_embedded_hal_blocking_i2c_WriteRead","_embedded_hal_blocking_rng_Read","_embedded_hal_blocking_serial_Write","_embedded_hal_blocking_spi_Transfer","_embedded_hal_blocking_spi_Write","_embedded_hal_digital_InputPin","_embedded_hal_digital_OutputPin","_embedded_hal_digital_ToggleableOutputPin","_embedded_hal_serial_Read","_embedded_hal_serial_Write","_embedded_hal_spi_FullDuplex","_embedded_hal_timer_CountDown","_embedded_hal_watchdog_Watchdog","_embedded_hal_watchdog_WatchdogDisable","_embedded_hal_watchdog_WatchdogEnable","Error","Error","Read","Write","flush","read","write","write_str","CaptureOnFirstTransition","CaptureOnSecondTransition","Error","FullDuplex","IdleHigh","IdleLow","MODE_0","MODE_1","MODE_2","MODE_3","Mode","Phase","Polarity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","eq","eq","eq","from","from","from","into","into","into","phase","polarity","read","send","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Cancel","CountDown","Error","Periodic","Time","cancel","start","wait","Time","Watchdog","WatchdogDisable","WatchdogEnable","disable","feed","start"],"q":[[0,"embedded_hal"],[55,"embedded_hal::adc"],[61,"embedded_hal::blocking"],[67,"embedded_hal::blocking::can"],[72,"embedded_hal::blocking::delay"],[76,"embedded_hal::blocking::i2c"],[112,"embedded_hal::blocking::rng"],[115,"embedded_hal::blocking::serial"],[120,"embedded_hal::blocking::serial::write"],[121,"embedded_hal::blocking::spi"],[148,"embedded_hal::blocking::spi::transfer"],[149,"embedded_hal::blocking::spi::write"],[150,"embedded_hal::blocking::spi::write_iter"],[151,"embedded_hal::can"],[235,"embedded_hal::can::nb"],[240,"embedded_hal::digital"],[244,"embedded_hal::digital::v1"],[256,"embedded_hal::digital::v1::toggleable"],[257,"embedded_hal::digital::v1_compat"],[289,"embedded_hal::digital::v2"],[324,"embedded_hal::digital::v2::toggleable"],[325,"embedded_hal::prelude"],[349,"embedded_hal::serial"],[357,"embedded_hal::spi"],[401,"embedded_hal::timer"],[409,"embedded_hal::watchdog"]],"d":["Input capture","The type of the value returned by <code>capture</code>","Enumeration of channels that can be used with this <code>Capture</code> …","Enumeration of channels that can be used with this <code>Pwm</code> …","The type of the value returned by <code>count</code>","Count direction","3, 2, 1","Type for the <code>duty</code> methods","Type for the <code>duty</code> methods","Enumeration of <code>Capture</code> errors","Pulse Width Modulation","A single PWM channel / pin","Quadrature encoder interface","A time unit that can be converted into a human time unit …","A time unit that can be converted into a human time unit …","1, 2, 3","Analog-digital conversion traits","Blocking API","","","Controller Area Network","“Waits” for a transition in the capture <code>channel</code> and …","","Returns the current pulse count of the encoder","Digital I/O","Returns the count direction","Disables a capture <code>channel</code>","Disables a PWM <code>channel</code>","Disables a PWM <code>channel</code>","Enables a capture <code>channel</code>","Enables a PWM <code>channel</code>","Enables a PWM <code>channel</code>","","Implementation of <code>core::fmt::Write</code> for the HAL’s …","","Returns the argument unchanged.","Returns the current duty cycle","Returns the current duty cycle","Returns the maximum duty cycle value","Returns the maximum duty cycle value","Returns the current PWM period","Returns the current resolution","Calls <code>U::from(self)</code>.","The prelude is a collection of all the traits in this crate","Serial interface","Sets a new duty cycle","Sets a new duty cycle","Sets a new PWM period","Sets the resolution of the capture timer","Serial Peripheral Interface","Timers","","","","Traits for interactions with a processors watchdog timer.","A marker trait to identify MCU pins that can be used as …","Error type returned by ADC methods","Channel ID type","ADCs that sample on single channels per request, and do so …","Get the specific ID that identifies this channel, for …","Request that the ADC begin a conversion on the specified …","Blocking CAN API","Delays","Blocking I2C API","Blocking hardware random number generator","Blocking serial API","Blocking SPI API","A blocking CAN interface that is able to transmit and …","Associated error type.","Associated frame type.","Blocks until a frame was received or an error occured.","Puts a frame in the transmit buffer. Blocks until space is …","Millisecond delay","Microsecond delay","Pauses execution for <code>ms</code> milliseconds","Pauses execution for <code>us</code> microseconds","Address mode (7-bit / 10-bit)","Error type","Error type","Error type","Error type","Error type","Error type","Error type","Transactional I2C operation.","Blocking read","Read data into the provided buffer","7-bit address mode type","10-bit address mode type","Transactional I2C interface.","Transactional I2C interface (iterator version).","Blocking write","Write data from the provided buffer","Blocking write (iterator version)","Blocking write (iterator version) + read","Blocking write + read","","","","Execute the provided operations on the I2C bus.","Execute the provided operations on the I2C bus (iterator …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads enough bytes from slave with <code>address</code> to fill <code>buffer</code>","","","","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code> and then reads …","Writes bytes to slave with address <code>address</code> and then reads …","Error type","Blocking read","Reads enough bytes from hardware random number generator …","The type of error that can occur when writing","Write half of a serial interface (blocking variant)","Block until the serial interface has sent all buffered …","Writes a slice, blocking until everything has been written","Blocking serial write","Marker trait to opt into default blocking write …","Error type","Error type","Error type","Associated error type","Operation for transactional SPI trait","Transactional trait allows multiple actions to be executed …","Blocking transfer","Write data out while reading data into the provided buffer","Blocking write","Write data from the provided buffer, discarding read data","Blocking write (iterator version)","","","","Execute the provided transactions","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Blocking transfer","Sends <code>words</code> to the slave. Returns the <code>words</code> received from …","","","","Blocking write","Sends <code>words</code> to the slave, ignoring all the incoming words","Blocking write (iterator version)","Sends <code>words</code> to the slave, ignoring all the incoming words","Default implementation of <code>blocking::spi::Transfer&lt;W&gt;</code> for …","Default implementation of <code>blocking::spi::Write&lt;W&gt;</code> for …","Default implementation of <code>blocking::spi::WriteIter&lt;W&gt;</code> for …","An ACK  error shall be detected by a transmitter whenever …","A bit error is detected at that bit time when the bit …","Calculated CRC sequence does not equal the received one.","CAN error","CAN error kind","Extended 29-bit Identifier (<code>0..=0x1FFF_FFFF</code>).","Extended 29-bit CAN Identifier (<code>0..=1FFF_FFFF</code>).","A form error shall be detected when a fixed-form bit field …","A CAN2.0 Frame","A CAN Identifier (standard or extended).","CAN ID <code>0x7FF</code>, the lowest priority.","CAN ID <code>0x1FFFFFFF</code>, the lowest priority.","A different error occurred. The original error may contain …","The peripheral receive buffer was overrun.","Standard 11-bit Identifier (<code>0..=0x7FF</code>).","Standard 11-bit CAN Identifier (<code>0..=0x7FF</code>).","A stuff error is detected at the bit time of the sixth …","CAN ID <code>0</code>, the highest priority.","CAN ID <code>0</code>, the highest priority.","Returns this CAN Identifier as a raw 16-bit integer.","Returns this CAN Identifier as a raw 32-bit integer.","","","","","","","","","","","","","","Returns the frame data (0..8 bytes in length).","Returns the data length code (DLC) which is in the range …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the frame identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this frame is a data frame.","Returns true if this frame is a extended frame.","Returns true if this frame is a remote frame.","Returns true if this frame is a standard frame.","Convert error to a generic CAN error kind","","Non-blocking CAN API","Creates a new frame.","Tries to create a <code>StandardId</code> from a raw 16-bit integer.","Tries to create a <code>ExtendedId</code> from a raw 32-bit integer.","Creates a new remote frame (RTR bit set).","Creates a new <code>StandardId</code> without checking if it is inside …","Creates a new <code>ExtendedId</code> without checking if it is inside …","","Returns the Base ID part of this extended identifier.","","","","","","","","","","","","","A CAN interface that is able to transmit and receive …","Associated error type.","Associated frame type.","Returns a received frame if available.","Puts a frame in the transmit buffer to be sent on the bus.","Digital I/O","v1 compatibility wrappers","Digital I/O","v2 compatibility shims","Single digital input pin","Single digital push-pull output pin","Push-pull output pin that can read its output state","Output pin that can be toggled","Is the input pin high?","Is the input pin low?","Is the pin in drive high mode?","Is the pin in drive low mode?","Drives the pin high","Drives the pin low","Toggle pin output.","If you can read <strong>and</strong> write the output state, a pin is …","Software-driven <code>toggle()</code> implementation.","Wrapper to allow fallible <code>v2::InputPin</code> traits to be …","Wrapper to allow fallible <code>v2::OutputPin</code> traits to be …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new OldOutputPin wrapper around a <code>v2::OutputPin</code>","Create an <code>OldInputPin</code> wrapper around a <code>v2::InputPin</code>.","","","","","","","","","","","Error type","Error type","Error type","Error type.","High pin state","Single digital input pin","Single pin that can switch from input to output mode, and …","Low pin state","Single digital push-pull output pin","Digital output pin state","Push-pull output pin that can read its output state","Output pin that can be toggled","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Tries to convert this pin to input mode.","Tries to convert this pin to output mode with the given …","Is the input pin high?","Is the input pin low?","Is the pin in drive high mode?","Is the pin in drive low mode?","","Drives the pin high","Drives the pin low","Drives the pin high or low depending on the provided value","Toggle pin output.","If you can read <strong>and</strong> write the output state, a pin is …","","","","Software-driven <code>toggle()</code> implementation.","","","","","","","","","","","","","","","","","","","","","","","","","Read error","Write error","Read half of a serial interface","Write half of a serial interface","Ensures that none of the previously written words are …","Reads a single word from the serial interface","Writes a single word to the serial interface","","Data in “captured” on the first clock transition","Data in “captured” on the second clock transition","An enumeration of SPI errors","Full duplex (master mode)","Clock signal high when idle","Clock signal low when idle","Helper for CPOL = 0, CPHA = 0","Helper for CPOL = 0, CPHA = 1","Helper for CPOL = 1, CPHA = 0","Helper for CPOL = 1, CPHA = 1","SPI mode","Clock phase","Clock polarity","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Clock phase","Clock polarity","Reads the word stored in the shift register","Sends a word to the slave","","","","","","","","","","Trait for cancelable countdowns.","A count down timer","Error returned when a countdown can’t be canceled.","Marker trait that indicates that a timer is periodic","The unit of time used by this timer","Tries to cancel this countdown.","Starts a new count down","Non-blockingly “waits” until the count down finishes","Unit of time used by the watchdog","Feeds an existing watchdog to ensure the processor isn’t …","Disables a running watchdog timer so the processor won’t …","Enables A watchdog timer to reset the processor if …","Disables the watchdog","Triggers the watchdog. This must be done once the watchdog …","Starts the watchdog with a given period, typically once …"],"i":[0,38,38,39,40,0,2,39,41,38,0,0,0,38,39,2,0,0,2,2,0,38,2,40,0,40,38,39,41,38,39,41,2,0,2,2,39,41,39,41,39,38,2,0,0,39,41,39,38,0,0,2,2,2,0,0,42,43,0,43,42,0,0,0,0,0,0,0,44,44,44,44,0,0,45,46,0,47,48,49,50,51,52,53,0,0,9,0,0,0,0,0,9,0,0,0,9,9,9,52,53,9,9,9,47,9,9,9,48,49,51,50,54,0,54,55,0,55,55,0,0,56,57,58,59,0,0,0,14,0,14,0,14,14,14,59,14,14,14,0,56,14,14,14,0,57,0,58,0,0,0,21,21,21,0,0,20,0,21,0,0,16,18,21,21,20,0,21,16,18,16,18,16,18,20,21,16,18,20,21,16,18,20,21,21,60,60,16,18,20,21,16,18,20,21,21,16,18,20,20,20,21,21,60,16,18,20,21,60,60,60,60,61,21,0,60,16,18,60,16,18,21,18,16,18,20,21,16,18,20,21,16,18,20,21,0,62,62,62,62,0,0,0,0,0,0,0,0,63,63,64,64,65,65,66,0,0,0,0,27,29,27,29,27,27,29,29,27,29,29,29,29,29,27,27,27,27,27,29,27,27,27,27,27,29,27,29,27,29,26,67,28,68,31,0,0,31,0,0,0,0,31,31,31,31,31,31,31,31,68,68,28,28,30,30,31,26,26,26,67,0,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,32,0,0,32,69,32,32,35,35,70,0,34,34,0,0,0,0,0,0,0,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,36,36,70,70,34,35,36,34,35,36,34,35,36,0,0,71,0,72,71,72,72,73,0,0,0,74,75,73],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[],1],[2,2],[[]],0,[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],3],0,[[2,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[6],[6],0,0,[[],7],[[],7],[[],8],0,0,0,0,0,[[]],[[],1],0,0,0,0,0,0,0,0,0,[[],7],[[],7],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[9,9],3],[[[10,[9]]],7],[11,7],[[9,4],5],[[]],[[]],[[[10,[12]]],7],[[],7],[[],7],[[],8],[[[10,[12]]],7],[11,7],[[11,[10,[12]]],7],[[[10,[12]],[10,[12]]],7],0,0,[[[10,[12]]],7],0,0,[[],7],[10,7],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[14,[13]],[14,[13]]],3],[[[10,[14]]],7],[[[14,[15]],4],5],[[]],[[]],0,[10,[[7,[10]]]],[[],7],[[],7],[[],8],0,[10,7],0,[11,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,17],[18,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[18,18],[20,20],[21,21],[[21,21],22],[[],[[10,[12]]]],[[],23],[[16,16],3],[[18,18],3],[[20,20],3],[[21,21],3],[[16,4],5],[[18,4],5],[[20,4],5],[[21,4],5],[[21,4],5],[[]],[[]],[[]],[16,20],[18,20],[[]],[[21,24]],[[],20],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],21],[21,21],0,[[[6,[20]],[10,[12]]],25],[17,[[25,[16]]]],[19,[[25,[18]]]],[[[6,[20]],23],25],[17,16],[19,18],[[21,21],[[25,[22]]]],[18,16],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],0,0,0,[[],1],[[],[[1,[25]]]],0,0,0,0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[26,[[27,[26]]]],[[]],[[]],[28,[[29,[28]]]],[[]],[[]],[[[29,[28]]],3],[[],[[7,[3]]]],[[[29,[28]]],3],[[],[[7,[3]]]],[[[27,[30]]],3],[[],[[7,[3]]]],[[],[[7,[3]]]],[[[27,[30]]],3],[26,[[27,[26]]]],[28,[[29,[28]]]],[[[27,[26]]]],[[],7],[[[27,[26]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[31,31],[[31,31],3],[[31,4],5],[3,31],[[]],[[]],[[],7],[31,7],[[],[[7,[3]]]],[[],[[7,[3]]]],[[],[[7,[3]]]],[[],[[7,[3]]]],[31],[[],7],[[],7],[31,7],[[],7],0,[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[32,33],5],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[34,34],[35,35],[36,36],[[34,34],3],[[35,35],3],[[36,36],3],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],1],[[],1],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],0,0,0,0,0,[[],7],[6],[[],[[1,[37]]]],0,0,0,0,[[]],[[]],[6]],"c":[240,244,245,246,247,248,249,250,251,252,253,254,255,256],"p":[[6,"Result"],[4,"Direction"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Into"],[4,"Result"],[3,"TypeId"],[4,"Operation"],[15,"slice"],[8,"IntoIterator"],[15,"u8"],[8,"PartialEq"],[4,"Operation"],[8,"Debug"],[3,"StandardId"],[15,"u16"],[3,"ExtendedId"],[15,"u32"],[4,"Id"],[4,"ErrorKind"],[4,"Ordering"],[15,"usize"],[8,"Hasher"],[4,"Option"],[8,"OutputPin"],[3,"OldOutputPin"],[8,"InputPin"],[3,"OldInputPin"],[8,"StatefulOutputPin"],[4,"PinState"],[8,"Write"],[15,"str"],[4,"Polarity"],[4,"Phase"],[3,"Mode"],[4,"Void"],[8,"Capture"],[8,"Pwm"],[8,"Qei"],[8,"PwmPin"],[8,"OneShot"],[8,"Channel"],[8,"Can"],[8,"DelayMs"],[8,"DelayUs"],[8,"Read"],[8,"Write"],[8,"WriteIter"],[8,"WriteRead"],[8,"WriteIterRead"],[8,"Transactional"],[8,"TransactionalIter"],[8,"Read"],[8,"Write"],[8,"Transfer"],[8,"Write"],[8,"WriteIter"],[8,"Transactional"],[8,"Frame"],[8,"Error"],[8,"Can"],[8,"InputPin"],[8,"StatefulOutputPin"],[8,"OutputPin"],[8,"ToggleableOutputPin"],[8,"ToggleableOutputPin"],[8,"IoPin"],[8,"Read"],[8,"FullDuplex"],[8,"Cancel"],[8,"CountDown"],[8,"WatchdogEnable"],[8,"WatchdogDisable"],[8,"Watchdog"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","provide","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[232,"proc_macro2::extra"],[247,"proc_macro2::token_stream"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,22,7,6,8,9,10,1,11,12,5,22,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,10,11,12,7,7,0,5,5,5,5,22,22,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,22,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,22,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,22,6,8,9,1,12,5,6,1,22,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,22,7,8,9,1,12,5,0,22,7,6,8,9,10,1,11,12,5,22,7,6,8,9,10,1,11,12,5,22,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12],13],[[],7],[9,14],[9,10],[[10,10],15],[[11,11],15],[[12,[0,[16,[18,[17]]]]],15],[[12,12],15],[[],15],[[],15],[[],15],[[7,19]],[[7,19]],0,[20,5],[20,5],[21,5],[21,5],[[22,23],24],[[22,23],24],[[7,23],24],[[7,23],24],[[6,23],24],[[8,23],24],[[8,23],24],[[9,23],24],[[9,23],24],[[10,23],24],[[1,23],24],[[1,23],24],[[11,23],24],[[12,23],24],[[12,23],24],[[5,23],24],[[5,23],24],[[]],[8,7],[[]],[25,7],[[]],[26,6],[1,8],[12,8],[[]],[9,8],[5,8],[[]],[[]],[[]],[[]],[[]],[[]],[19,7],[19,7],[17,[[27,[7,22]]]],[17,[[27,[5,22]]]],[[12,28]],[29,5],[29,5],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,34],[7,15],[35,5],[35,5],[[6,6],[[36,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[17,6],12],[[17,6],12],[[12,12],[[36,[13]]]],[37],[[6,6],6],[[8,6]],[[9,6]],[[1,6]],[[12,6]],[[5,6]],[6,[[36,[38]]]],[1,11],[22,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[17,5],[[5,[40,[39]]],[[36,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[3,5],[3,5],[6,26],[39,5],[39,5],0,[[]],[[]],[14,14],[[]],[14,6],[[14,23],24],[[]],[[]],[14,6],[14,6],[[]],[[],27],[[],27],[[],41],0,0,[[]],[[]],[34,34],[[]],[[34,23],24],[[]],[[]],[[]],[34,[[36,[8]]]],[34],[[]],[[],27],[[],27],[[],41]],"c":[],"p":[[3,"Punct"],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[3,"DelimSpan"],[15,"bool"],[8,"Sized"],[15,"str"],[8,"AsRef"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Result"],[8,"Hasher"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"Demand"],[3,"String"],[15,"usize"],[8,"RangeBounds"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]]},\
"proc_macro_error":{"doc":"proc-macro-error","t":"DINEQIIQDNLOOFCLLLLLLLLLLOALOOOOLKKMLLLLLLLLLLLLLMLLLXCLLLLLKLKLKLLKLLLLLLLLLLLLKFF","n":["Diagnostic","DiagnosticExt","Error","Level","Ok","OptionExt","ResultExt","Some","SpanRange","Warning","abort","abort","abort_call_site","abort_if_dirty","append_dummy","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_site","clone","clone_into","collapse","diagnostic","dummy","emit","emit_call_site_error","emit_call_site_warning","emit_error","emit_warning","eq","expect_or_abort","expect_or_abort","first","fmt","fmt","fmt","from","from","from","from","from_tokens","help","into","into","into","join_range","last","message","new","note","proc_macro_error","set_dummy","single_span","span","span_error","span_help","span_note","span_range_error","span_range_error","span_range_help","span_range_help","span_range_note","span_range_note","spanned","spanned_range","spanned_range","to_owned","to_tokens","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap_or_abort","append_dummy","set_dummy"],"q":[[0,"proc_macro_error"],[81,"proc_macro_error::dummy"]],"d":["Represents a single diagnostic message","A collection of methods that do not exist in …","","Represents a diagnostic level","","This traits expands <code>Option</code> with some handy shortcuts.","This traits expands <code>Result&lt;T, Into&lt;Diagnostic&gt;&gt;</code> with some …","","","","Abort the proc-macro’s execution and display the …","Abort proc-macro execution right now and display the error.","Shortcut for <code>abort!(Span::call_site(), msg...)</code>. This macro …","Abort macro execution and display all the emitted errors, …","","","","","","","","Create a <code>SpanRange</code> resolving at call site.","","","Collapse the range into single span, preserving as much …","Build <code>Diagnostic</code> instance from provided arguments.","Facility to emit dummy implementations (or whatever) in …","Display the diagnostic while not aborting macro execution.","Shortcut for <code>emit_error!(Span::call_site(), ...)</code>. This …","Shortcut for <code>emit_warning!(Span::call_site(), ...)</code>.","Emit an error while not aborting the proc-macro right away.","Emit a warning. Warnings are not errors and compilation won…","","Behaves like <code>Result::expect</code>: if self is <code>Ok</code> yield the …","Behaves like <code>Option::expect</code>: if self is <code>Some</code> yield the …","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Construct span range from a <code>TokenStream</code>. This method …","Attach a “help” note to your main message.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Join two span ranges. The resulting range will start at …","","The message of main warning/error (no notes attached)","Create a new diagnostic message that points to …","Attach a note to your main message","","","Create a range with the <code>first</code> and <code>last</code> spans being the …","","Add another error message to self such that it will be …","Attach a “help” note to your main message, the note …","Attach a note to your main message, the note will have it…","Add another error message to self such that it will be …","","Attach a “help” note to your main message, the note …","","Attach a note to your main message, the note will have it…","","Create a new diagnostic message that points to the <code>span</code>","Create a new diagnostic message that points to the …","","","","","","","","","","","","","Behaves like <code>Result::unwrap</code>: if self is <code>Ok</code> yield the …","Same as <code>set_dummy</code> but, instead of resetting, appends …","Sets dummy token stream which will be appended to …"],"i":[0,0,5,0,17,0,0,18,0,5,1,0,0,0,0,5,1,3,5,1,3,3,3,3,3,0,0,1,0,0,0,0,5,17,18,3,5,1,3,5,1,1,3,3,1,5,1,3,3,3,1,1,1,0,0,3,1,1,1,1,19,1,19,1,19,1,1,19,1,3,1,5,1,3,5,1,3,5,1,3,17,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[1,2],0,0,[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[3,3],[[]],[3,4],0,0,[1],0,0,0,0,[[5,5],6],[7],[7],0,[[5,8],9],[[1,8],9],[[3,8],9],[[]],[10,1],[[]],[[]],[11,3],[[1,12],1],[[]],[[]],[[]],[[3,3],3],0,[1,7],[[5,12],1],[[1,12],1],0,0,[4,3],[[],4],[[1,4,12],1],[[1,4,12],1],[[1,4,12],1],[[3,12]],[[1,3,12],1],[[3,12]],[[1,3,12],1],[[3,12]],[[1,3,12],1],[[4,5,12],1],[[3,5,12]],[[3,5,12],1],[[]],[[1,13]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[]],[13],[13,[[16,[13]]]]],"c":[],"p":[[3,"Diagnostic"],[15,"never"],[3,"SpanRange"],[3,"Span"],[4,"Level"],[15,"bool"],[15,"str"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"ToTokens"],[3,"String"],[3,"TokenStream"],[4,"Result"],[3,"TypeId"],[4,"Option"],[8,"ResultExt"],[8,"OptionExt"],[8,"DiagnosticExt"]]},\
"proc_macro_error_attr":{"doc":"This is <code>#[proc_macro_error]</code> attribute to be used with …","t":"X","n":["proc_macro_error"],"q":[[0,"proc_macro_error_attr"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,11,11,11,11,12,0,4,4,0,0,12,12,4,4,4],"f":[0,0,0,[[[2,[1]]]],[3],[[3,4]],[[3,4]],[5,6],0,[7,8],[7,8],0,0,[[],[[10,[9]]]],[[],[[10,[9]]]],[[],8],[[],8],[8]],"c":[],"p":[[4,"TokenTree"],[8,"Into"],[8,"IntoIterator"],[8,"ToTokens"],[3,"Formatter"],[6,"Result"],[8,"Sized"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"]]},\
"snafu":{"doc":"SNAFU","t":"IDIIIDIIYQKLKLLLLLKKOLLLLKLLLKLLLLLLKK","n":["AsErrorSource","Backtrace","ErrorCompat","GenerateBacktrace","IntoError","NoneError","OptionExt","ResultExt","Snafu","Source","as_backtrace","as_backtrace","as_error_source","backtrace","borrow","borrow","borrow_mut","borrow_mut","context","context","ensure","fmt","fmt","from","from","generate","generate","into","into","into_error","try_from","try_from","try_into","try_into","type_id","type_id","with_context","with_context"],"q":[[0,"snafu"]],"d":["Converts the receiver into an <code>Error</code> trait object, suitable …","A backtrace starting from the beginning of the thread.","Backports changes to the <code>Error</code> trait to versions of Rust …","Construct a backtrace, allowing it to be optional.","Combines an underlying error with additional information …","A temporary error type used when converting an <code>Option</code> into …","Additions to <code>Option</code>.","Additions to <code>Result</code>.","See the crate-level documentation for SNAFU which contains …","The underlying error","Retrieve the optional backtrace","","For maximum effectiveness, this needs to be called as a …","Returns a <code>Backtrace</code> that may be printed.","","","","","Extend a <code>Result</code>’s error with additional …","Convert an <code>Option</code> into a <code>Result</code> with additional …","Ensure a condition is true. If it is not, return from the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate a new backtrace instance","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Combine the information to produce the error","","","","","","","Extend a <code>Result</code>’s error with lazily-generated …","Convert an <code>Option</code> into a <code>Result</code> with lazily-generated …"],"i":[0,0,0,0,0,0,0,0,0,4,10,1,11,3,12,1,12,1,13,14,0,1,1,12,1,10,1,12,1,4,12,1,12,1,12,1,13,14],"f":[0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[1,[[2,[1]]]],0,[[],[[2,[1]]]],[[]],[[]],[[]],[[]],[[[4,[[0,[0,3]]]]],[[5,[[0,[0,3]]]]]],[[[4,[[0,[0,3]]]]],[[5,[[0,[0,3]]]]]],0,[[1,6],7],[[1,6],7],[[]],[[]],[[]],[[],1],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],8],[[],8],[9,[[5,[[0,[0,3]]]]]],[9,[[5,[[0,[0,3]]]]]]],"c":[],"p":[[3,"Backtrace"],[4,"Option"],[8,"ErrorCompat"],[8,"IntoError"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[8,"FnOnce"],[8,"GenerateBacktrace"],[8,"AsErrorSource"],[3,"NoneError"],[8,"ResultExt"],[8,"OptionExt"]]},\
"snafu_derive":{"doc":"","t":"Y","n":["Snafu"],"q":[[0,"snafu_derive"]],"d":["See the crate-level documentation for SNAFU which contains …"],"i":[0],"f":[0],"c":[],"p":[]},\
"thiserror":{"doc":"github crates-io docs-rs","t":"Y","n":["Error"],"q":[[0,"thiserror"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"thiserror_impl":{"doc":"","t":"Y","n":["Error"],"q":[[0,"thiserror_impl"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]]},\
"void":{"doc":"Void","t":"IIELLLLLLLLLLLLFKK","n":["ResultVoidErrExt","ResultVoidExt","Void","borrow","borrow_mut","clone","eq","fmt","fmt","from","into","partial_cmp","try_from","try_into","type_id","unreachable","void_unwrap","void_unwrap_err"],"q":[[0,"void"]],"d":["Extensions to <code>Result&lt;Void, E&gt;</code>","Extensions to <code>Result&lt;T, Void&gt;</code>","The empty type for cases which can’t occur.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","A safe version of <code>intrinsincs::unreachable</code>.","Get the value out of a wrapper.","Get the error out of a wrapper."],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,10,11],"f":[0,0,0,[[]],[[]],[1,1],[1,2],[[1,3],4],[[1,3],4],[[]],[[]],[1,[[6,[5]]]],[[],7],[[],7],[[],8],[1,9],[[]],[[]]],"c":[],"p":[[4,"Void"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Ordering"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"never"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
